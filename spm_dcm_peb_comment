% DCM    - {N [x M]} structure array of DCMs from N subjects
% -------------------------------------------------------------------------
%     DCM{i}.M.pE   - prior expectation of parameters
%     DCM{i}.M.pC   - prior covariances of parameters
%     DCM{i}.Ep     - posterior expectations
%     DCM{i}.Cp     - posterior covariance
%     DCM{i}.F      - free energy
%
% M.X      - 2nd-level design matrix: X(:,1) = ones(N,1) [default]
% M.bE     - 3rd-level prior expectation [default: DCM{1}.M.pE]
% M.bC     - 3rd-level prior covariance  [default: DCM{1}.M.pC/M.alpha]
% M.pC     - 2nd-level prior covariance  [default: DCM{1}.M.pC/M.beta]
% M.hE     - 2nd-level prior expectation of log precisions [default: 0]
% M.hC     - 2nd-level prior covariances of log precisions [default: 1/16]
% M.maxit  - maximum iterations [default: 64]
%
% M.Q      - covariance components: {'single','fields','all','none'}
% M.alpha  - optional scaling to specify M.bC [default = 1]
% M.beta   - optional scaling to specify M.pC [default = 16]
%          - if beta equals 0, sample variances will be used
%
% NB: the prior covariance of 2nd-level random effects is:
%            exp(M.hE)*DCM{1}.M.pC/M.beta [default DCM{1}.M.pC/16]
%
% NB2:       to manually specify which parameters should be assigned to 
%            which covariance components, M.Q can be set to a cell array of 
%            [n x n] binary matrices, where n is the number of DCM 
%            parameters. A value of M.Q{i}(n,n)==1 indicates that parameter 
%            n should be modelled with component i.
% M.Xnames - cell array of names for second level parameters [default: {}]
% 
% field    - parameter fields in DCM{i}.Ep to optimise [default: {'A','B'}]
%            'All' will invoke all fields. This argument effectively allows 
%            one to specify the parameters that constitute random effects.     
% 
% PEB      - hierarchical dynamic model
%
%     PEB.Snames    - string array of first level model names
%     PEB.Pnames    - string array of parameters of interest
%     PEB.Pind      - indices of parameters in spm_vec(DCM{i}.Ep) 
%     PEB.Xnames - names of second level parameters
% 
%     PEB.M.X       - second level (between-subject) design matrix
%     PEB.M.W       - second level (within-subject) design matrix
%     PEB.M.Q       - precision [components] of second level random effects 
%     PEB.M.pE      - prior expectation of second level parameters
%     PEB.M.pC      - prior covariance of second level parameters
%     PEB.M.hE      - prior expectation of second level log-precisions
%     PEB.M.hC      - prior covariance of second level log-precisions
%     PEB.Ep        - posterior expectation of second level parameters
%     PEB.Eh        - posterior expectation of second level log-precisions
%     PEB.Cp        - posterior covariance of second level parameters
%     PEB.Ch        - posterior covariance of second level log-precisions
%     PEB.Ce        - expected  covariance of second level random effects
%     PEB.F         - free energy of second level model
% DCM           - 1st level (reduced) DCM structures with empirical priors
%
%          If DCM is an an (N x M} array, hierarchical inversion will be
%          applied to each model (i.e., each row) - and PEB will be a 
%          {1 x M} cell array.
% This routine inverts a hierarchical DCM using variational Laplace and
% Bayesian model reduction. 
% In essence, it optimises the empirical priors 
% over the parameters of a set of first level DCMs, using second level or
% between subject constraints specified in the design matrix X. 
% This scheme is efficient in the sense that it does not require inversion of the first level DCMs 
% - it just requires the prior and posterior densities from each
% first level DCM to compute empirical priors under the implicit
% hierarchical model. 
% The output of this scheme (PEB) can be re-entered
% recursively to invert deep hierarchical models. 
% Furthermore, Bayesian
% model comparison (BMC) can be specified in terms of the empirical priors
% to perform BMC at the group level. 
% Alternatively, subject-specific (first level) posterior expectations 
% can be used for classical inference in the usual way. 
% Note that these (summary statistics) are optimal in the sense
% that they have been estimated under empirical (hierarchical)  priors.
%
% If called with a single DCM, there are no between-subject effects and the
% design matrix is assumed to model mixtures of parameters at the first level.
%
% If called with a cell array, each column is assumed to contain 1st
% level DCMs inverted under the same model.
%
%
% get filenames and set up
if ~nargin
    [P, sts] = spm_select([2 Inf],'^DCM.*\.mat$','Select DCM*.mat files');
    if ~sts, return; end
end
if ischar(P),   P = cellstr(P);  end
% This is done to handle the case where a single file path was selected instead of multiple paths.
if isstruct(P), P = {P};         end
% This is done to handle the case where a single structure was provided instead of multiple structures.
%%%%%%
% if ~nargin: this condition checks if the number of input argument ('nargin') is zero.
% In matlab, 'nargin' returns the number of input arguments provided to a function.
% '~' symbol negates the regults
% therefore, if no input arguments are provided, the condistion is true.
% 'spm_select' function: select files that match the pattern 'DCM*.MAT'.
% [2 Inf]: it expects at least 2 files.
% [P, sts]: returns two outputs: P and sts, 
% 'P' is a variable that will store the paths to the selected files
% 'sts' is a status variable that indicates whether the file selection was successful or not.
% if ~sts: if the file selection was unsuccessful (sts is false)
% return: will exit the current function or script and return to the calling function.
% In summary, these lines of code allow the user to either provide file paths, a single path, or no input at all. 
% If no input is provided, the code prompts the user to select files matching a specific pattern. 
% The selected paths are then processed and converted into a consistent format for further processing in the code.
%
% check for DEM structures
try
    DEM = P;
    P   = spm_dem2dcm(P);
end
%
% check parameter fields and design matrices
try, load(P{1}); catch, DCM = P{1}; end

if nargin < 2,      M.X = ones(length(P),1); end
if isnumeric(M),    M   = struct('X',M);     end
if ~isfield(M,'X'), M.X = ones(length(P),1); end
if isempty(M.X),    M.X = ones(length(P),1); end

if nargin < 3; field = {'A','B'};  end
if strcmpi(field,'all');  field = fieldnames(DCM.M.pE);end
if ischar(field), field = {field}; end

try, maxit = M.maxit; catch, maxit = 64; end
%%%%%%%%
% try, load(P{1}): load the contents of the first element in the cell array 'P', if fails (e.g. if the element is not a valid file path)
% catch, DCM=P{1}: it assumes that 'P{1}' is already a loaded variable or structure and assigns it directly to the variable 'DCM'
% if nargin <2: it means that only one input argument 'P' provided
% M.X = ones(length(P),1); in this case, it creates a design matrix with ones, where rows = the length of P
% if isnumeric(M), M = struct('X',M): handle the case where M is provided as a numeric array instead of a structure.
% if ~isfiled(M,'X'), M.X = ones(length(P),1): handle the case where M is a structure, but it does not have the field X.
% isempty: done to handle the case where M.X is an empty array.
% if nargin < 3, P√ M√，defult field;
% all: assign field as the name of the fileds in the DCM.M.pE.?????DCM.M.pE where????
% character array(string): converts into a cell array containing the string as its only element. {'A'}
% matrix: specifies the maximum number of iterations for a specific operation\
% In summary, checks and assignments related to parameter fields and design matrices.
%
% repeat for each model (column) if P is an array
if size(P,2) > 1
    for i = 1:size(P,2)
        [p,q]   = spm_dcm_peb(P(:,i),M,field);
        PEB(i)  = p;
        P(:,i)  = q;
    end
    return
end
%%%%%
% if : P contains multiple models (>1)
% for: the loop will execute as many times as there are columns in P
% spm_dcm_peb: performs some calculations or operations on the specific model and returns two outputs: 'p' and 'q'
% PEB(i) = p:assign the value of p to i, it is used to store the results or outputs obatained from each model separately, each element in PEB corresponds to a specific model's result
% P(:,i) =q: updates P natrix with the modified values after performing calculations or operations on each model. This allows the changes made to each model to be preseved in P
% return: precessing all the models when P contains multiple columns
%
% get (first level) densities (summary statistics)
%==========================================================================
% select DCM parameters
% -------------------------------------------------------------------------
Ns    = numel(P);                               % number of subjects
if isfield(M,'bC') && Ns > 1
    q = spm_find_pC(M.bC,M.bE,field);           % parameter indices
elseif isnumeric(field)
    q = field;                                  % parameter indices
else
    q = spm_find_pC(DCM,field);                 % parameter indices
end
%%%%%
% Ns = numel(P): representing the number of subjects or models.
% if:check the M has a field named bC and if Ns >1.
% if √: spm_find_pC function and passes three arguments: M.bc, M.be, field.And returened indices are assigned to the variable q
% elseif√ (if ×): check if represents explicit parameter indices. assume that field contains explicit parameter indices
% else(if× elseif×): call spm_find_pC function and passes two arguments (DCM and field)
% It's used to find the parameter indices based on he provided DCM structure and field values. The returened indices are assigned to the variable q
% In sum, this codes responsible for selecting the DCM parameters.
%
% prepare field names
try
    Pstr  = spm_fieldindices(DCM.M.pE,q);       % field names 
catch
    if isfield(DCM,'Pnames')
        % PEB given as input. Field names have form covariate:fieldname
        Pstr  = [];
        for i = 1:length(DCM.Xnames)
            str  = strcat(DCM.Xnames{i}, ': ', DCM.Pnames);
            Pstr = [Pstr; str];
        end
    else
        % Generate field names
        q = q(:);
        Pstr  = strcat('P', cellstr(num2str(q)));
    end
end

% count parameters
Np = numel(q);                               
if Np == 1
    Pstr = {Pstr}; 
end
%%%%%%%%%
% try Pster = spm_fieldindics(DCM.M.pE,q): function spm_fieldindics with two arguments (DCM.M.pE and q). Attempts to retrive the field names corrsponding to the parameter indices q from the DCM.M.qE structuer.
% catch: try×, execute the catch block.
% if: check if DCM structure has a field named Pnames.
% Pstr=[]: empty array Pstr to store the field names.
% for: iterates over the elements of DCM.Xnames, assuming it is a cell array. It iterates over the covariate names associated with DCM.
% str: concatenates the i-th element of DCM.Xname + : + DCM.Pnames, forms a string representing the covariate name and the associated field names.
% Pstr: appends the string str to the Pstr array, builds up the array of field names.
% else√ (try×, if×): this block executed.
% q = q(:): convert the variable q into a column vector by using the colon operator: and assign it back to q.
% Pstr: convert numeric values in q to string(num2str, [1;2;3] -> '1 2 3'),convert the resulting character array into a cell array of strings(cellstr, '1 2 3' -> {'1'; '2'; '3'}), wraps each value with P, and concatenates them to form the field name(strcat'P': {'P1';'P2';'P3'}).
% Np: calculates the number of elements in the vector q, and assign it to Np.
% The value of Np will then be calculated as numel(q), which represents the number of elements in q. Since A is a 12x12 matrix, the size of q will be 144 (12 * 12), and thus Np will be assigned the value 144.
% if: check if Np ==1, if so, it convert Pstr into a cell array containning a single element.
% in sum, prepares the field names associated with the DCM parameters.
% ?? mine is else? try.
% read and unpack DCM(s)
for i = 1:Ns
    
    % get DCM
    try, load(P{i}); catch, DCM = P{i}; end
    
    % get prior and posterior densities over all parameters
    if isstruct(DCM.M.pC)
        pC{i} = diag(spm_vec(DCM.M.pC));
    else
        pC{i} = DCM.M.pC;
    end
    pE{i} = spm_vec(DCM.M.pE);
    qE{i} = spm_vec(DCM.Ep);
    qC{i} = DCM.Cp;
    
    % check priors
    if i == 1
        Ne = numel(pE{i});
    end
    if numel(pE{i}) ~= Ne
        error('Please ensure all DCMs have the same parameterisation');
    end
    
    % and get the free energy of model with full priors
    iF(i) = DCM.F;
    
end
%%%%%
% for: initiates a loop tha from 1 to Ns (representing the number of subjs)
% try: load the file specified by P{i}, if failed, assumes that P{i} already contains the DCM structure and assign it to DCM. P could be a file path or a preloaded DCM structure.
% if: check if DCM.M.pC is a structure, whether pC within DCM.M, represents a covariance matrix.
%% pC: prior covariabces of parameters.
% pC{i}: if the condition in if is ture, extractes the diagonal elements of the covariance matrix DCM.M.pC(diag). the result assigned pC at the i-th position.
% pC of mine: 198×198 double
% else(if×)
% pC{i}: assign the value of DCM.M.pC directly to pC at i-th position.
% pE{i}: extracts the expected values of the parameters pE from the field DCM.M.pE (spm_vec).
% qE{i}
% qC{i}
% i==1 & numel(pE{i}) ~= Ne: check all DCMs have the same parameterization.
% iF(i)
% In sum, snippet reads and unpacks the DCMs, for each subjs.
%%%%%%
% deal with variability across subjects' priors (arithmetic mean)
PE = spm_zeros(pE{1}(q));
PC = spm_zeros(pC{1}(q,q));
for i = 1:Ns
    PE = PE + pE{i}(q);
    PC = PC + pC{i}(q,q);
end
PE = PE ./ Ns;
PC = PC ./ Ns;
%%%%%
% PE: pE{1}(q) c=selects the elements of the prior means (pE) corresponding to the indices in q. store the accumulated of prior means across subjects.
% spm_zeros(): a function that creates a matrix filled with 0. And takes the size of pE{1}(q) as an input and creates a matrix of 0s with the same dimensions.
% PC-pC{1}(q,q)
% PE = PE + PE{i}(q): add the prior mean vector of the current subject, and performs element-wise addition.
% PC
% PE = PE ./ Ns:calculates the arithmetic mean of pE across subjects.
% PC
% In sum, calculate the average (PE) and the average (PC) across all subjects. This helps to deal with variability in the priors across subjects, providing a consolidated representation of the prior information for further analysis.
%
% deal with rank deficient priors
U = spm_svd(PC);
%%%%%%%
% svd: singular value decomposition, decomposes a matrix into 3 components: U, S, and V. dimensionality reduction or extracting meaningful features.
% U: output, contains the left singular vectors of PC.represent the principal components of direction of maximum variance, provide info. about the pattern of variability in PC.
%
% for i = 1:Ns
    % select parameters in field
    pE{i} = U'*pE{i}(q); 
    pC{i} = U'*pC{i}(q,q)*U; 
    qE{i} = U'*qE{i}(q); 
    qC{i} = U'*qC{i}(q,q)*U;
    
    % shrink posterior to accommodate inefficient inversions
    if Ns > 1
       qC{i} = spm_inv(spm_inv(qC{i}) + spm_inv(pC{i})/16);
    end        
end
%%%%%%
% U'*pE{i}(q): applies the transformation to the selected pE, resulting in the transformed pE for i-th subj.
%% essentially, projects the pE onto the subspace defined by the left singular vectors.
% U'*pC{i}(q,q)*U
% U'*qE{i}(q)
% U'*qC{i}(q,q)*U
% spm_inv():compute the inverse of a matrix.
% pC{i})/16: computes the inverse of the pC for i-th subj divided by 16.
% qC{i}
% purpose: shrink the qC, and more robust and reliable estimates qC.
%
% hierarchical model design and defaults
%
% second level model
if  isfield(M,'alpha'), alpha  = M.alpha; else, alpha = 1;        end
if  isfield(M,'beta'),  beta   = M.beta;  else, beta  = 16;       end
if ~isfield(M,'W'),     M.W    = speye(Np,Np);        
%%%%%%
% M.alpha
% M.beta
% M.W: does not exit, a sparse identity matrix, speye(Np,Np), as default weighting matrix used in the second-level model.
% 
% covariance component specification
Q = {};
if ~isfield(M,'Q')
    OPTION = 'single';
elseif iscell(M.Q) && isnumeric(M.Q{1})
    OPTION = 'manual';
    Q = M.Q;
else
    OPTION = M.Q;
end
%%%%%
% Q = {}: empty cell array to store the covariance components specified for the second-level model.
% ~isfield: check if M.field
% option: single indicating that a single covariance component will be used.
% iscell && isnumeric: check if field Q.M is cell array and first element is numeric
% option: manually specified covariance components in Q
% M.Q = 'all'
% snippet determines the specifcation of covariance components Q for the second-level model
%
% design matrices
if Ns > 1;
    
    % between-subject design matrices and prior expectations
    %======================================================================
    X   = M.X;
    W   = U'*M.W*U;
    
else
    
    % within subject design
    %======================================================================
    OPTION = 'none';
    U      = 1;
    X      = 1;
    W      = M.W;

end
%%%%%%%%
% M.X:design matrix represents the group-level effects or differences between subjects.
% W: calculates the weighted bewteen-subjects design matrix. Resulting in the weighted design matrix W(incorporates subj-spe variations.)
% Ns =1, within subject design.
% in sum, specification of design matrices for second-level model, between-subj design matrices and pC(U) are specified
% 
% variable names
if isfield(M,'Xnames')
    Xnames = M.Xnames;
else
    Nx = size(X,2);
    Xnames = cell(1,Nx);
    for i = 1:Nx
        Xnames{i} = sprintf('Covariate %d',i);
    end
end
%%%%%%%%%
%Nx = size(x,2): calculates the number of columns in the design matrix, X is corresponds to the number of covariates or vairable in the design.
% Xnames = cell(1,Nx): initailzes an empty cell array Xnames, approprate size to store the variable names.
% sprintf('Covariate %d',i): sprintf function to create a string withe format, %d is replaced by i. e.g. Covariate 1
% in sum, M.Xnames, according to the number of columns in the design matrix X.
%
% get priors (from DCM if necessary) and ensure correct sizes
if isfield(M,'bE')
    M.bE = spm_vec(M.bE);
    if size(M.bE,1) > Np && Ns > 1, M.bE = M.bE(q);   end
else
    M.bE = PE;
end
%%%%%%%%%
% M.bE
% spm_vec(M.bE): ensures M.bE converted into a column vector(spm_vec).
% Np(numel(q)) && Ns(numel(P))
% M.bE = PE: assign the prior expectations PE to M.bE
% In sum, M.bE.
%
% prior covariance of (e.g.,) group effects
if isfield(M,'bC')
    if isstruct(M.bC),    M.bC = diag(spm_vec(M.bC)); end
    if size(M.bC,1) > Np && Ns > 1, M.bC = M.bC(q,q); end
else
    M.bC = PC/alpha;
end
%%%%%%%
% M.bC
%
% between (e.g.,) subject covariances (for precision components Q)--
if isfield(M,'pC')
    if isstruct(M.pC),    M.pC = diag(spm_vec(M.pC)); end
    if size(M.pC,1) > Np && Ns > 1, M.pC = M.pC(q,q); end
elseif ~beta
    
    % If beta = 0, use variance of MAP estimators
    %----------------------------------------------------------------------
    M.pC = diag(var(spm_cat(qE),1,2));
    
else
    
    % otherwise, use a scaled prior covariance
    %----------------------------------------------------------------------
    M.pC = PC/beta;
end
%%%%%%%%%
% pC is numeric (198×198): the relevant subset of M.pC is selected using M.pC(q,q)
% M.pC = M.pC(q,q)
%
% prior precision (pP) and components (Q) for empirical covariance
pQ    = spm_inv(U'*M.pC*U);
rP    = pQ;
switch OPTION
    
    case{'single'}
        
        % one between subject precision component
        %------------------------------------------------------------------
        Q = {pQ};
        
    case{'fields'}
        
        % between subject precision components (one for each field)
        %------------------------------------------------------------------
        pq    = spm_inv(M.pC);
        for i = 1:length(field)
            j    = spm_fieldindices(DCM.M.pE,field{i});
            j    = find(ismember(q,j));            
            Q{i} = sparse(Np,Np);
            Q{i}(j,j) = pq(j,j);
            Q{i} = U'*Q{i}*U;
        end
        
    case{'all'}
        
        % between subject precision components (one for each parameter)
        %------------------------------------------------------------------
        pq    = spm_inv(M.pC);
        k     = 1;
        for i = 1:Np
            qk = sparse(i,i,pq(i,i),Np,Np);            
            qk = U'*qk*U;
            if any(qk(:))
                Q{k} = qk;
                k    = k + 1;
            end
        end
        
    case {'manual'}
        
        % manually provided cell array of (binary) precision components
        %------------------------------------------------------------------
        pq = spm_inv(M.pC);
        k = 1;
        for i = 1:length(Q)
            j       = find(diag(Q{i}));
            j       = find(ismember(q,j));
            qk      = sparse(Np,Np);
            qk(j,j) = pq(j,j);
            qk      = U'*qk*U;
            if any(qk(:))
                Q{k} = qk;
                k = k + 1;
            end
        end
        
    case {'none'}
        % Do nothing
        
    otherwise
        warning('Unknown covariance component specification');
end
%%%%%%%%%%%%
% pQ: presents the prior precision matrix, computed by THE inverse U'*M.pC*U'(spm_inv) , U(spm_svd(PC));
% rP
% switch OPTION: detemine the value of the OPTION.
% 










































